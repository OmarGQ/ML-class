# -*- coding: utf-8 -*-
"""
Created on Sun Jul  2 14:14:21 2023

@author: danie
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

#%matplotlib inline

data = pd.read_csv("HW1.csv")

fig, ax1 = plt.subplots()
plot_1 = ax1.plot(data["Year"], data["Number of people who died by becoming tangled in their bedsheets"], label = "Number of people who died by becoming tangled in their bedsheets", color = 'red', marker='o')
ax1.set_xlabel('Years')
ax1.set_ylabel('Deaths (US)')
ax1.set_ylim([300, 900])
ax2 = ax1.twinx()
plot_2 = ax2.plot(data["Year"], data["Total revenue generated by skiing facilities (US)"], label = "Total revenue generated by skiing facilities (US)", color = 'Yellow', marker='o')
ax2.set_ylabel('Dollars in Millions')


lns = plot_1 + plot_2
labels = [l.get_label() for l in lns]
plt.legend(lns, labels, loc='upper center', bbox_to_anchor=(0.5, -0.05),
          fancybox=True, shadow=True, ncol=5)
plt.show()

from sklearn.datasets import load_iris
iris_dataset = load_iris()
features = iris_dataset.feature_names
data = iris_dataset.data
targets = iris_dataset.target

df = pd.DataFrame(data, columns=features)
pd.plotting.scatter_matrix(df, c=targets, figsize=(15,15),
                          marker='o', hist_kwds={'bins': 20}, s=60,
                          alpha=.8);


data2 = data.T

x = np.array([[4, 8], [2.0, 5.0], [1,7], [0, 2.5]])
y = np.array([[4.1, 7.5], [2.0, 4.5], [1, 7], [0, 2.5]])
base = np.eye(4)
fig = plt.figure(figsize=(13, 13))
gs = fig.add_gridspec(4, 4, hspace=0, wspace=0)
(ax1, ax2, ax3, ax4), (ax5, ax6, ax7, ax8), (ax9, ax10, ax11, ax12), (ax13, ax14, ax15, ax16) = gs.subplots()
axs = [(ax1, ax2, ax3, ax4), (ax5, ax6, ax7, ax8), (ax9, ax10, ax11, ax12), (ax13, ax14, ax15, ax16)]

for i in range(len(base)):
    for j in range(len(base[i])):
        if base[i][j] != 0:
            axs[i][j].hist(data2[i], bins=20)
            axs[i][j].set_xlabel(features[j])
        else:
            axs[i][j].scatter(data2[j], data2[i], c=targets, marker='o', alpha=.8)
            axs[i][j].set_xlabel(features[j])
            axs[i][j].set_xlim(x[j])
            axs[i][j].set_ylim(y[i])
        if j != 0:
            axs[i][j].yaxis.set_visible(False)
        else:
            axs[i][j].set_ylabel(features[i])
plt.tight_layout()


from sklearn.datasets import load_boston
boston_dataset = load_boston()
featuresB = boston_dataset.feature_names
dataB = boston_dataset.data
dataB2 = dataB.T
target = boston_dataset.target
#print(boston_dataset.DESCR)


fig2 = plt.figure(figsize=(12, 12))
fig, ax1 = plt.subplots(figsize=(2.9, 2.9))
ax1.scatter(dataB2[12], target, c=target, marker='o', alpha=.8)
ax1.set_ylabel("MEDV")
ax1.set_xlabel(featuresB[12])

gs2 = fig2.add_gridspec(3, 4)
(ax1, ax2, ax3, ax4), (ax5, ax6, ax7, ax8), (ax9, ax10, ax11, ax12) = gs2.subplots(sharey='row')
axs2 = [(ax1, ax2, ax3, ax4), (ax5, ax6, ax7, ax8), (ax9, ax10, ax11, ax12)]
c = 0
axs2[0][0].set_ylabel("MEDV")

for i in range(3):
    axs2[i][0].set_ylabel("MEDV")
    for j in range(4):                                                                   
        axs2[i][j].scatter(dataB2[c], target, c=target, marker='o', alpha=.4)
        axs2[i][j].set_xlabel(featuresB[c])
        c += 1

plt.tight_layout()